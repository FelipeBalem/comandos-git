ADICIONANDO UM ARQUIVO NÃO MONITORADA
GIT ADD

git add nome_do_arquivo

# NO pycharm:
 arquivos ignorados ficam amarelos
 arquivos monitorados ficam verdes
 arquivos não monitorados ficam vermelhos


podemos utilizar
git add *.tipoarquivo para add todos os arquivos do mesmo tipo
git add .  # para add TODOS os arquivos
------------------------------------------------------------

COMMIT

# O commit é utilizado para fazer o envio/submissão de arquivos que estão sendo rastreados (tracked) para
o status de stagged (prontos para o envio para o branch (galho) principal do projeto)
comando:
git commit -m "mensagem"  # vai fazer o commit de todos os arquivos tracked
[master 4581394] adicionado teste_commit para verificação de hash
-------| ----- | ----------------------------------------------|
branch   hash id   mensagem

# O commit cria um snapshot do sistema, salvando uma "imagem" de como ele estava naquele momento

----------------------------------------------------------------------------------------

Para verificar o log, utilize o comando
|-------|
|git log|
|-------|
Resultado:
                                                   Indica qual foi o último commit
                                                |---------------|
#commit 45813943cb0a9d636403b9e157e90bbd22d5b25b (HEAD -> master)
#Author: Felipe Balem <felipe.balem.si@gmail.com>
#Date:   Mon Nov 22 21:43:04 2021 -0400
#
#    adicionado teste_commit para verificação de hash
#
#commit 4d03a0f0e49d120e59a29ecaa75cf0ff38c75df6
#:

Caso a lista de commit não caiba no terminal, ele vai mostrar : (como acima)
Comando uteis dentro do log
    /<busca> vai procurar nas mensagens dos commits o texto de <busca>. Ex:
    /teste

    q -> quit
    b -> voltar para outra palavra encontrada

#FLAGS PARA GIT LOG

# adicione ao final do comando git log --flag

--oneline  -> Retorna os commits de forma resumida (apenas uma linha). Ex:
git log --oneline

#2f896fa (HEAD -> master) Modificações em config e comandos_basicos
#4581394 adicionado teste_commit para verificação de hash
#4d03a0f modificado o .gitignore
|------|
| -<n> | -> Retorna o(s) n commits mais recentes. Ex:
|------|
git log -1

#PODEMOS CONCATENAR AS FLAGS
git log --oneline -2  -> Retorna os 2 últimos commits de forma resumida


#Podemos pesquisar por datas
--before="YYYY-MM-DD"  -> Pesquisa antes da data especificada
--after="YYYY-MM-DD"  -> Pesquisa após a data especificada
--since="1 day ago"  -> Pode colocar month, year, hour, minute


#OBS: Pode utilizar a escrita no after e before
#OBS2: concatene garoto! vai funcionar "-1; -2; etc"


# Podemos buscar por autor
--author="Nome"

# Pode informar só o primeiro nome, não precisa ser o nome completo

# Podemos buscar por parte da mensagem
--grep="Mensagem"

# Retorna apenas os commits que possuem essa parte informada na mensagem

------------------------------------------------------------------------------
# Navegando entre os snapshots
|-----------|
|  checkout |
|-----------|

git checkout <hash id>  # pode ser só os 7 primeiros caracteres. Ex:
git checkout 4581394
 Resultado:
# Note: switching to '2f896fa'.
#
#You are in 'detached HEAD' state. You can look around, make experimental
#changes and commit them, and you can discard any commits you make in this
#state without impacting any branches by switching back to a branch.
#
#If you want to create a new branch to retain commits you create, you may
#do so (now or later) by using -c with the switch command. Example:
#
#  git switch -c <new-branch-name>
#
#Or undo this operation with:
#
#  git switch -
#
#Turn off this advice by setting config variable advice.detachedHead to false
#
#HEAD is now at 2f896fa Modificações em config e comandos_basicos

# ATENÇÃO, AO VOLTAR PARA UM HASH ID, SEU PROGRAMA IRÁ VOLTAR TOTALMENTE AQUELE MOMENTO, ATÉ EXCLUINDO ARQUIVOS QUE
NÃO EXISTIAM
# O seu programa atual continuará existindo no último commit realizado, para voltar basta utilizar o comando
git checkout master
# Você pode utilizar normalmente o programa e depois salvar em um novo branch
